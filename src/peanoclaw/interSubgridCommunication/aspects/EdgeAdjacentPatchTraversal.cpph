/*
 * EdgeAdjacentPatchTraversal.cpph
 *
 *  Created on: Jul 9, 2013
 *      Author: kristof
 */

#include "peano/utils/Loop.h"

template<class LoopBody>
peanoclaw::interSubgridCommunication::aspects::EdgeAdjacentPatchTraversal<LoopBody>::EdgeAdjacentPatchTraversal(
  peanoclaw::Patch patches[TWO_POWER_D],
  LoopBody& loopBody
) {
  #ifdef Dim2
  for(int sourceIndex = TWO_POWER_D - 1; sourceIndex >= 0; sourceIndex--) {
    tarch::la::Vector<DIMENSIONS, int> sourcePosition
      = peano::utils::dDelinearised(TWO_POWER_D - 1 - sourceIndex, 2);

    tarch::la::Vector<DIMENSIONS, int> destinationPosition;
    for(int d = 0; d < DIMENSIONS; d++) {
      destinationPosition(d) = (sourcePosition(d)+1) % 2;
    }
    int destinationIndex = TWO_POWER_D - 1 - peano::utils::dLinearised(destinationPosition, 2);

    loopBody(
      patches[sourceIndex],
      sourceIndex,
      patches[destinationIndex],
      destinationIndex,
      destinationPosition - sourcePosition
    );
  }
  #elif Dim3
  for(int sourceIndex = TWO_POWER_D - 1; sourceIndex >= 0; sourceIndex--) {
    tarch::la::Vector<DIMENSIONS, int> sourcePosition
      = peano::utils::dDelinearised(TWO_POWER_D - 1 - sourceIndex, 2);

    for(int axis = 0; axis < DIMENSIONS; axis++) {
      tarch::la::Vector<DIMENSIONS, int> destinationPosition;
      for(int d = 0; d < DIMENSIONS; d++) {
        if(axis != d) {
          destinationPosition(d) = (sourcePosition(d)+1) % 2;
        }
      }
      int destinationIndex = TWO_POWER_D - 1 - peano::utils::dLinearised(destinationPosition, 2);

      loopBody(
        patches[sourceIndex],
        sourceIndex,
        patches[destinationIndex],
        destinationIndex,
        destinationPosition - sourcePosition
      );
    }
  }
  #endif
}



