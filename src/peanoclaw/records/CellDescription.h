#ifndef _PEANO_APPLICATIONS_PEANOCLAW_RECORDS_CELLDESCRIPTION_H
#define _PEANO_APPLICATIONS_PEANOCLAW_RECORDS_CELLDESCRIPTION_H

#include "peano/utils/Globals.h"
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <string>
#include <iostream>

namespace peanoclaw {
  namespace records {
    class CellDescription;
    class CellDescriptionPacked;
  }
}

/**
 * @author This class was autogenerated by DaStGen
 * 		   DataStructureGenerator (DaStGen), 2007-2009,
 * 		   by Wolfgang Eckhardt
 *
 * 		   build date: 09-12-2010 17:47
 *
 * @date   03/02/2013 21:06
 */
class peanoclaw::records::CellDescription { 
   
   public:
      
      typedef peanoclaw::records::CellDescriptionPacked Packed;
      
      struct PersistentRecords {
         tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
         int _ghostLayerWidth;
         int _unknownsPerSubcell;
         int _auxiliarFieldsPerSubcell;
         int _level;
         bool _isVirtual;
         tarch::la::Vector<DIMENSIONS,double> _position;
         tarch::la::Vector<DIMENSIONS,double> _size;
         double _time;
         double _timestepSize;
         double _maximumFineGridTime;
         double _minimumFineGridTimestep;
         bool _synchronizeFineGrids;
         bool _willCoarsen;
         double _minimalNeighborTimeConstraint;
         double _minimalLeafNeighborTimeConstraint;
         double _minimalNeighborTime;
         double _maximalNeighborTimestep;
         double _estimatedNextTimestepSize;
         bool _skipNextGridIteration;
         int _ageInGridIterations;
         double _demandedMeshWidth;
         tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
         tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
         int _cellDescriptionIndex;
         int _uOldIndex;
         int _uNewIndex;
         int _auxIndex;
         /**
          * Generated
          */
         PersistentRecords();
         
         /**
          * Generated
          */
         PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const bool& skipNextGridIteration, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const;
         
         /**
          * Generated
          */
         void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor);
         
         /**
          * Generated
          */
         int getGhostLayerWidth() const;
         
         /**
          * Generated
          */
         void setGhostLayerWidth(const int& ghostLayerWidth);
         
         /**
          * Generated
          */
         int getUnknownsPerSubcell() const;
         
         /**
          * Generated
          */
         void setUnknownsPerSubcell(const int& unknownsPerSubcell);
         
         /**
          * Generated
          */
         int getAuxiliarFieldsPerSubcell() const;
         
         /**
          * Generated
          */
         void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell);
         
         /**
          * Generated
          */
         int getLevel() const;
         
         /**
          * Generated
          */
         void setLevel(const int& level);
         
         /**
          * Generated
          */
         bool getIsVirtual() const;
         
         /**
          * Generated
          */
         void setIsVirtual(const bool& isVirtual);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getPosition() const;
         
         /**
          * Generated
          */
         void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getSize() const;
         
         /**
          * Generated
          */
         void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
         
         /**
          * Generated
          */
         double getTime() const;
         
         /**
          * Generated
          */
         void setTime(const double& time);
         
         /**
          * Generated
          */
         double getTimestepSize() const;
         
         /**
          * Generated
          */
         void setTimestepSize(const double& timestepSize);
         
         /**
          * Generated
          */
         double getMaximumFineGridTime() const;
         
         /**
          * Generated
          */
         void setMaximumFineGridTime(const double& maximumFineGridTime);
         
         /**
          * Generated
          */
         double getMinimumFineGridTimestep() const;
         
         /**
          * Generated
          */
         void setMinimumFineGridTimestep(const double& minimumFineGridTimestep);
         
         /**
          * Generated
          */
         bool getSynchronizeFineGrids() const;
         
         /**
          * Generated
          */
         void setSynchronizeFineGrids(const bool& synchronizeFineGrids);
         
         /**
          * Generated
          */
         bool getWillCoarsen() const;
         
         /**
          * Generated
          */
         void setWillCoarsen(const bool& willCoarsen);
         
         /**
          * Generated
          */
         double getMinimalNeighborTimeConstraint() const;
         
         /**
          * Generated
          */
         void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint);
         
         /**
          * Generated
          */
         double getMinimalLeafNeighborTimeConstraint() const;
         
         /**
          * Generated
          */
         void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint);
         
         /**
          * Generated
          */
         double getMinimalNeighborTime() const;
         
         /**
          * Generated
          */
         void setMinimalNeighborTime(const double& minimalNeighborTime);
         
         /**
          * Generated
          */
         double getMaximalNeighborTimestep() const;
         
         /**
          * Generated
          */
         void setMaximalNeighborTimestep(const double& maximalNeighborTimestep);
         
         /**
          * Generated
          */
         double getEstimatedNextTimestepSize() const;
         
         /**
          * Generated
          */
         void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize);
         
         /**
          * Generated
          */
         bool getSkipNextGridIteration() const;
         
         /**
          * Generated
          */
         void setSkipNextGridIteration(const bool& skipNextGridIteration);
         
         /**
          * Generated
          */
         int getAgeInGridIterations() const;
         
         /**
          * Generated
          */
         void setAgeInGridIterations(const int& ageInGridIterations);
         
         /**
          * Generated
          */
         double getDemandedMeshWidth() const;
         
         /**
          * Generated
          */
         void setDemandedMeshWidth(const double& demandedMeshWidth);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const;
         
         /**
          * Generated
          */
         void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const;
         
         /**
          * Generated
          */
         void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds);
         
         /**
          * Generated
          */
         int getCellDescriptionIndex() const;
         
         /**
          * Generated
          */
         void setCellDescriptionIndex(const int& cellDescriptionIndex);
         
         /**
          * Generated
          */
         int getUOldIndex() const;
         
         /**
          * Generated
          */
         void setUOldIndex(const int& uOldIndex);
         
         /**
          * Generated
          */
         int getUNewIndex() const;
         
         /**
          * Generated
          */
         void setUNewIndex(const int& uNewIndex);
         
         /**
          * Generated
          */
         int getAuxIndex() const;
         
         /**
          * Generated
          */
         void setAuxIndex(const int& auxIndex);
         
         
      };
      
   private: 
      PersistentRecords _persistentRecords;
      
   public:
      /**
       * Generated
       */
      CellDescription();
      
      /**
       * Generated
       */
      CellDescription(const PersistentRecords& persistentRecords);
      
      /**
       * Generated
       */
      CellDescription(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const bool& skipNextGridIteration, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
      
      /**
       * Generated
       */
      virtual ~CellDescription();
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const;
      
      /**
       * Generated
       */
      void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor);
      
      /**
       * Generated
       */
      int getSubdivisionFactor(int elementIndex) const;
      
      /**
       * Generated
       */
      void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor);
      
      /**
       * Generated
       */
      int getGhostLayerWidth() const;
      
      /**
       * Generated
       */
      void setGhostLayerWidth(const int& ghostLayerWidth);
      
      /**
       * Generated
       */
      int getUnknownsPerSubcell() const;
      
      /**
       * Generated
       */
      void setUnknownsPerSubcell(const int& unknownsPerSubcell);
      
      /**
       * Generated
       */
      int getAuxiliarFieldsPerSubcell() const;
      
      /**
       * Generated
       */
      void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell);
      
      /**
       * Generated
       */
      int getLevel() const;
      
      /**
       * Generated
       */
      void setLevel(const int& level);
      
      /**
       * Generated
       */
      bool getIsVirtual() const;
      
      /**
       * Generated
       */
      void setIsVirtual(const bool& isVirtual);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getPosition() const;
      
      /**
       * Generated
       */
      void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position);
      
      /**
       * Generated
       */
      double getPosition(int elementIndex) const;
      
      /**
       * Generated
       */
      void setPosition(int elementIndex, const double& position);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getSize() const;
      
      /**
       * Generated
       */
      void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
      
      /**
       * Generated
       */
      double getSize(int elementIndex) const;
      
      /**
       * Generated
       */
      void setSize(int elementIndex, const double& size);
      
      /**
       * Generated
       */
      double getTime() const;
      
      /**
       * Generated
       */
      void setTime(const double& time);
      
      /**
       * Generated
       */
      double getTimestepSize() const;
      
      /**
       * Generated
       */
      void setTimestepSize(const double& timestepSize);
      
      /**
       * Generated
       */
      double getMaximumFineGridTime() const;
      
      /**
       * Generated
       */
      void setMaximumFineGridTime(const double& maximumFineGridTime);
      
      /**
       * Generated
       */
      double getMinimumFineGridTimestep() const;
      
      /**
       * Generated
       */
      void setMinimumFineGridTimestep(const double& minimumFineGridTimestep);
      
      /**
       * Generated
       */
      bool getSynchronizeFineGrids() const;
      
      /**
       * Generated
       */
      void setSynchronizeFineGrids(const bool& synchronizeFineGrids);
      
      /**
       * Generated
       */
      bool getWillCoarsen() const;
      
      /**
       * Generated
       */
      void setWillCoarsen(const bool& willCoarsen);
      
      /**
       * Generated
       */
      double getMinimalNeighborTimeConstraint() const;
      
      /**
       * Generated
       */
      void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint);
      
      /**
       * Generated
       */
      double getMinimalLeafNeighborTimeConstraint() const;
      
      /**
       * Generated
       */
      void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint);
      
      /**
       * Generated
       */
      double getMinimalNeighborTime() const;
      
      /**
       * Generated
       */
      void setMinimalNeighborTime(const double& minimalNeighborTime);
      
      /**
       * Generated
       */
      double getMaximalNeighborTimestep() const;
      
      /**
       * Generated
       */
      void setMaximalNeighborTimestep(const double& maximalNeighborTimestep);
      
      /**
       * Generated
       */
      double getEstimatedNextTimestepSize() const;
      
      /**
       * Generated
       */
      void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize);
      
      /**
       * Generated
       */
      bool getSkipNextGridIteration() const;
      
      /**
       * Generated
       */
      void setSkipNextGridIteration(const bool& skipNextGridIteration);
      
      /**
       * Generated
       */
      int getAgeInGridIterations() const;
      
      /**
       * Generated
       */
      void setAgeInGridIterations(const int& ageInGridIterations);
      
      /**
       * Generated
       */
      double getDemandedMeshWidth() const;
      
      /**
       * Generated
       */
      void setDemandedMeshWidth(const double& demandedMeshWidth);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const;
      
      /**
       * Generated
       */
      void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds);
      
      /**
       * Generated
       */
      double getRestrictionLowerBounds(int elementIndex) const;
      
      /**
       * Generated
       */
      void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds);
      
      /**
       * Generated
       */
      tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const;
      
      /**
       * Generated
       */
      void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds);
      
      /**
       * Generated
       */
      double getRestrictionUpperBounds(int elementIndex) const;
      
      /**
       * Generated
       */
      void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds);
      
      /**
       * Generated
       */
      int getCellDescriptionIndex() const;
      
      /**
       * Generated
       */
      void setCellDescriptionIndex(const int& cellDescriptionIndex);
      
      /**
       * Generated
       */
      int getUOldIndex() const;
      
      /**
       * Generated
       */
      void setUOldIndex(const int& uOldIndex);
      
      /**
       * Generated
       */
      int getUNewIndex() const;
      
      /**
       * Generated
       */
      void setUNewIndex(const int& uNewIndex);
      
      /**
       * Generated
       */
      int getAuxIndex() const;
      
      /**
       * Generated
       */
      void setAuxIndex(const int& auxIndex);
      
      /**
       * Generated
       */
      std::string toString() const;
      
      /**
       * Generated
       */
      void toString(std::ostream& out) const;
      
      
      PersistentRecords getPersistentRecords() const;
      /**
       * Generated
       */
      CellDescriptionPacked convert() const;
      
      
   #ifdef Parallel
      protected:
         static tarch::logging::Log _log;
         
         int _senderRank;
         
      public:
         
         /**
          * Global that represents the mpi datatype.
          */
         static MPI_Datatype Datatype;
         
         /**
          * Initializes the data type for the mpi operations. Has to be called
          * before the very first send or receive operation is called.
          */
         static void initDatatype();
         
         static void shutdownDatatype();
         
         void send(int destination, int tag);
         
         void receive(int source, int tag);
         
         static bool isMessageInQueue(int tag);
         
         int getSenderRank() const;
         
   #endif
      
   };
   
   /**
    * @author This class was autogenerated by DaStGen
    * 		   DataStructureGenerator (DaStGen), 2007-2009,
    * 		   by Wolfgang Eckhardt
    *
    * 		   build date: 09-12-2010 17:47
    *
    * @date   03/02/2013 21:06
    */
   class peanoclaw::records::CellDescriptionPacked { 
      
      public:
         
         struct PersistentRecords {
            tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
            int _ghostLayerWidth;
            int _unknownsPerSubcell;
            int _auxiliarFieldsPerSubcell;
            int _level;
            bool _isVirtual;
            tarch::la::Vector<DIMENSIONS,double> _position;
            tarch::la::Vector<DIMENSIONS,double> _size;
            double _time;
            double _timestepSize;
            double _maximumFineGridTime;
            double _minimumFineGridTimestep;
            bool _synchronizeFineGrids;
            bool _willCoarsen;
            double _minimalNeighborTimeConstraint;
            double _minimalLeafNeighborTimeConstraint;
            double _minimalNeighborTime;
            double _maximalNeighborTimestep;
            double _estimatedNextTimestepSize;
            bool _skipNextGridIteration;
            int _ageInGridIterations;
            double _demandedMeshWidth;
            tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
            tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
            int _cellDescriptionIndex;
            int _uOldIndex;
            int _uNewIndex;
            int _auxIndex;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const bool& skipNextGridIteration, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const;
            
            /**
             * Generated
             */
            void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor);
            
            /**
             * Generated
             */
            int getGhostLayerWidth() const;
            
            /**
             * Generated
             */
            void setGhostLayerWidth(const int& ghostLayerWidth);
            
            /**
             * Generated
             */
            int getUnknownsPerSubcell() const;
            
            /**
             * Generated
             */
            void setUnknownsPerSubcell(const int& unknownsPerSubcell);
            
            /**
             * Generated
             */
            int getAuxiliarFieldsPerSubcell() const;
            
            /**
             * Generated
             */
            void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell);
            
            /**
             * Generated
             */
            int getLevel() const;
            
            /**
             * Generated
             */
            void setLevel(const int& level);
            
            /**
             * Generated
             */
            bool getIsVirtual() const;
            
            /**
             * Generated
             */
            void setIsVirtual(const bool& isVirtual);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getPosition() const;
            
            /**
             * Generated
             */
            void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getSize() const;
            
            /**
             * Generated
             */
            void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
            
            /**
             * Generated
             */
            double getTime() const;
            
            /**
             * Generated
             */
            void setTime(const double& time);
            
            /**
             * Generated
             */
            double getTimestepSize() const;
            
            /**
             * Generated
             */
            void setTimestepSize(const double& timestepSize);
            
            /**
             * Generated
             */
            double getMaximumFineGridTime() const;
            
            /**
             * Generated
             */
            void setMaximumFineGridTime(const double& maximumFineGridTime);
            
            /**
             * Generated
             */
            double getMinimumFineGridTimestep() const;
            
            /**
             * Generated
             */
            void setMinimumFineGridTimestep(const double& minimumFineGridTimestep);
            
            /**
             * Generated
             */
            bool getSynchronizeFineGrids() const;
            
            /**
             * Generated
             */
            void setSynchronizeFineGrids(const bool& synchronizeFineGrids);
            
            /**
             * Generated
             */
            bool getWillCoarsen() const;
            
            /**
             * Generated
             */
            void setWillCoarsen(const bool& willCoarsen);
            
            /**
             * Generated
             */
            double getMinimalNeighborTimeConstraint() const;
            
            /**
             * Generated
             */
            void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint);
            
            /**
             * Generated
             */
            double getMinimalLeafNeighborTimeConstraint() const;
            
            /**
             * Generated
             */
            void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint);
            
            /**
             * Generated
             */
            double getMinimalNeighborTime() const;
            
            /**
             * Generated
             */
            void setMinimalNeighborTime(const double& minimalNeighborTime);
            
            /**
             * Generated
             */
            double getMaximalNeighborTimestep() const;
            
            /**
             * Generated
             */
            void setMaximalNeighborTimestep(const double& maximalNeighborTimestep);
            
            /**
             * Generated
             */
            double getEstimatedNextTimestepSize() const;
            
            /**
             * Generated
             */
            void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize);
            
            /**
             * Generated
             */
            bool getSkipNextGridIteration() const;
            
            /**
             * Generated
             */
            void setSkipNextGridIteration(const bool& skipNextGridIteration);
            
            /**
             * Generated
             */
            int getAgeInGridIterations() const;
            
            /**
             * Generated
             */
            void setAgeInGridIterations(const int& ageInGridIterations);
            
            /**
             * Generated
             */
            double getDemandedMeshWidth() const;
            
            /**
             * Generated
             */
            void setDemandedMeshWidth(const double& demandedMeshWidth);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const;
            
            /**
             * Generated
             */
            void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds);
            
            /**
             * Generated
             */
            tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const;
            
            /**
             * Generated
             */
            void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds);
            
            /**
             * Generated
             */
            int getCellDescriptionIndex() const;
            
            /**
             * Generated
             */
            void setCellDescriptionIndex(const int& cellDescriptionIndex);
            
            /**
             * Generated
             */
            int getUOldIndex() const;
            
            /**
             * Generated
             */
            void setUOldIndex(const int& uOldIndex);
            
            /**
             * Generated
             */
            int getUNewIndex() const;
            
            /**
             * Generated
             */
            void setUNewIndex(const int& uNewIndex);
            
            /**
             * Generated
             */
            int getAuxIndex() const;
            
            /**
             * Generated
             */
            void setAuxIndex(const int& auxIndex);
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         CellDescriptionPacked();
         
         /**
          * Generated
          */
         CellDescriptionPacked(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         CellDescriptionPacked(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const bool& skipNextGridIteration, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
         
         /**
          * Generated
          */
         virtual ~CellDescriptionPacked();
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const;
         
         /**
          * Generated
          */
         void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor);
         
         /**
          * Generated
          */
         int getSubdivisionFactor(int elementIndex) const;
         
         /**
          * Generated
          */
         void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor);
         
         /**
          * Generated
          */
         int getGhostLayerWidth() const;
         
         /**
          * Generated
          */
         void setGhostLayerWidth(const int& ghostLayerWidth);
         
         /**
          * Generated
          */
         int getUnknownsPerSubcell() const;
         
         /**
          * Generated
          */
         void setUnknownsPerSubcell(const int& unknownsPerSubcell);
         
         /**
          * Generated
          */
         int getAuxiliarFieldsPerSubcell() const;
         
         /**
          * Generated
          */
         void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell);
         
         /**
          * Generated
          */
         int getLevel() const;
         
         /**
          * Generated
          */
         void setLevel(const int& level);
         
         /**
          * Generated
          */
         bool getIsVirtual() const;
         
         /**
          * Generated
          */
         void setIsVirtual(const bool& isVirtual);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getPosition() const;
         
         /**
          * Generated
          */
         void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position);
         
         /**
          * Generated
          */
         double getPosition(int elementIndex) const;
         
         /**
          * Generated
          */
         void setPosition(int elementIndex, const double& position);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getSize() const;
         
         /**
          * Generated
          */
         void setSize(const tarch::la::Vector<DIMENSIONS,double>& size);
         
         /**
          * Generated
          */
         double getSize(int elementIndex) const;
         
         /**
          * Generated
          */
         void setSize(int elementIndex, const double& size);
         
         /**
          * Generated
          */
         double getTime() const;
         
         /**
          * Generated
          */
         void setTime(const double& time);
         
         /**
          * Generated
          */
         double getTimestepSize() const;
         
         /**
          * Generated
          */
         void setTimestepSize(const double& timestepSize);
         
         /**
          * Generated
          */
         double getMaximumFineGridTime() const;
         
         /**
          * Generated
          */
         void setMaximumFineGridTime(const double& maximumFineGridTime);
         
         /**
          * Generated
          */
         double getMinimumFineGridTimestep() const;
         
         /**
          * Generated
          */
         void setMinimumFineGridTimestep(const double& minimumFineGridTimestep);
         
         /**
          * Generated
          */
         bool getSynchronizeFineGrids() const;
         
         /**
          * Generated
          */
         void setSynchronizeFineGrids(const bool& synchronizeFineGrids);
         
         /**
          * Generated
          */
         bool getWillCoarsen() const;
         
         /**
          * Generated
          */
         void setWillCoarsen(const bool& willCoarsen);
         
         /**
          * Generated
          */
         double getMinimalNeighborTimeConstraint() const;
         
         /**
          * Generated
          */
         void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint);
         
         /**
          * Generated
          */
         double getMinimalLeafNeighborTimeConstraint() const;
         
         /**
          * Generated
          */
         void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint);
         
         /**
          * Generated
          */
         double getMinimalNeighborTime() const;
         
         /**
          * Generated
          */
         void setMinimalNeighborTime(const double& minimalNeighborTime);
         
         /**
          * Generated
          */
         double getMaximalNeighborTimestep() const;
         
         /**
          * Generated
          */
         void setMaximalNeighborTimestep(const double& maximalNeighborTimestep);
         
         /**
          * Generated
          */
         double getEstimatedNextTimestepSize() const;
         
         /**
          * Generated
          */
         void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize);
         
         /**
          * Generated
          */
         bool getSkipNextGridIteration() const;
         
         /**
          * Generated
          */
         void setSkipNextGridIteration(const bool& skipNextGridIteration);
         
         /**
          * Generated
          */
         int getAgeInGridIterations() const;
         
         /**
          * Generated
          */
         void setAgeInGridIterations(const int& ageInGridIterations);
         
         /**
          * Generated
          */
         double getDemandedMeshWidth() const;
         
         /**
          * Generated
          */
         void setDemandedMeshWidth(const double& demandedMeshWidth);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const;
         
         /**
          * Generated
          */
         void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds);
         
         /**
          * Generated
          */
         double getRestrictionLowerBounds(int elementIndex) const;
         
         /**
          * Generated
          */
         void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds);
         
         /**
          * Generated
          */
         tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const;
         
         /**
          * Generated
          */
         void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds);
         
         /**
          * Generated
          */
         double getRestrictionUpperBounds(int elementIndex) const;
         
         /**
          * Generated
          */
         void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds);
         
         /**
          * Generated
          */
         int getCellDescriptionIndex() const;
         
         /**
          * Generated
          */
         void setCellDescriptionIndex(const int& cellDescriptionIndex);
         
         /**
          * Generated
          */
         int getUOldIndex() const;
         
         /**
          * Generated
          */
         void setUOldIndex(const int& uOldIndex);
         
         /**
          * Generated
          */
         int getUNewIndex() const;
         
         /**
          * Generated
          */
         void setUNewIndex(const int& uNewIndex);
         
         /**
          * Generated
          */
         int getAuxIndex() const;
         
         /**
          * Generated
          */
         void setAuxIndex(const int& auxIndex);
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         CellDescription convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
            int _senderRank;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             */
            static MPI_Datatype Datatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag);
            
            void receive(int source, int tag);
            
            static bool isMessageInQueue(int tag);
            
            int getSenderRank() const;
            
      #endif
         
      };
      
      #endif
      
